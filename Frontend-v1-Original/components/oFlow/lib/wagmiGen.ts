// Generated by @wagmi/cli@1.1.0 on 6/6/2023 at 4:14:44 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from "wagmi";
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WPLS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const wplsABI = [
  {
    type: "event",
    inputs: [
      { name: "owner", type: "address", indexed: true },
      { name: "spender", type: "address", indexed: true },
      { name: "value", type: "uint256", indexed: false },
    ],
    name: "Approval",
  },
  {
    type: "event",
    inputs: [
      { name: "from", type: "address", indexed: true },
      { name: "to", type: "address", indexed: true },
      { name: "value", type: "uint256", indexed: false },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", type: "address" },
      { name: "spender", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", type: "address" },
      { name: "amount", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "recipient", type: "address" },
      { name: "amount", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "sender", type: "address" },
      { name: "recipient", type: "address" },
      { name: "amount", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", type: "bool" }],
  },
] as const;

export const wplsAddress =
  "0xA1077a294dDE1B09bB078844df40758a5D0f9a27" as const;

export const wplsConfig = { address: wplsAddress, abi: wplsABI } as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// oFLOW
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const oFlowABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" },
      { name: "_admin", internalType: "address", type: "address" },
      {
        name: "_paymentToken",
        internalType: "contract ERC20",
        type: "address",
      },
      {
        name: "_underlyingToken",
        internalType: "contract ERC20",
        type: "address",
      },
      { name: "_pair", internalType: "contract IPair", type: "address" },
      { name: "_treasury", internalType: "address", type: "address" },
      { name: "_discount", internalType: "uint256", type: "uint256" },
      { name: "_turnstile", internalType: "address", type: "address" },
      { name: "_csrNftId", internalType: "uint256", type: "uint256" },
    ],
  },
  { type: "error", inputs: [], name: "OptionToken_InvalidDiscount" },
  { type: "error", inputs: [], name: "OptionToken_InvalidTwapPoints" },
  { type: "error", inputs: [], name: "OptionToken_NoAdminRole" },
  { type: "error", inputs: [], name: "OptionToken_NoPauserRole" },
  { type: "error", inputs: [], name: "OptionToken_PastDeadline" },
  { type: "error", inputs: [], name: "OptionToken_Paused" },
  { type: "error", inputs: [], name: "OptionToken_SlippageTooHigh" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "paymentAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Exercise",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "isPaused", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "PauseStateChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "discount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "SetDiscount",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newPair",
        internalType: "contract IPair",
        type: "address",
        indexed: true,
      },
    ],
    name: "SetPair",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newTreasury",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "SetTreasury",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "twapPoints",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "SetTwapPoints",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MAX_DISCOUNT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MAX_TWAP_POINTS",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_DISCOUNT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PAUSER_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_amount", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "discount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_maxPaymentAmount", internalType: "uint256", type: "uint256" },
      { name: "_recipient", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" },
    ],
    name: "exercise",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_maxPaymentAmount", internalType: "uint256", type: "uint256" },
      { name: "_recipient", internalType: "address", type: "address" },
    ],
    name: "exercise",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_amount", internalType: "uint256", type: "uint256" }],
    name: "getDiscountedPrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_amount", internalType: "uint256", type: "uint256" }],
    name: "getTimeWeightedAveragePrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isPaused",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pair",
    outputs: [{ name: "", internalType: "contract IPair", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "pause",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "paymentToken",
    outputs: [{ name: "", internalType: "contract ERC20", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_discount", internalType: "uint256", type: "uint256" }],
    name: "setDiscount",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_pair", internalType: "contract IPair", type: "address" },
    ],
    name: "setPair",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_treasury", internalType: "address", type: "address" }],
    name: "setTreasury",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_twapPoints", internalType: "uint256", type: "uint256" }],
    name: "setTwapPoints",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "treasury",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "twapPoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "unPause",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "underlyingToken",
    outputs: [{ name: "", internalType: "contract ERC20", type: "address" }],
  },
] as const;

export const oFlowAddress =
  "0x1Fc0A9f06B6E85F023944e74F70693Ac03fDC621" as const;

export const oFlowConfig = { address: oFlowAddress, abi: oFlowABI } as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wplsABI}__.
 */
export function useWplsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof wplsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wplsABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: wplsABI,
    address: wplsAddress,
    ...config,
  } as UseContractReadConfig<typeof wplsABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wplsABI}__ and `functionName` set to `"allowance"`.
 */
export function useWplsAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof wplsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wplsABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: wplsABI,
    address: wplsAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof wplsABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wplsABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useWplsBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof wplsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wplsABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: wplsABI,
    address: wplsAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof wplsABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wplsABI}__ and `functionName` set to `"decimals"`.
 */
export function useWplsDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof wplsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wplsABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: wplsABI,
    address: wplsAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof wplsABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wplsABI}__ and `functionName` set to `"name"`.
 */
export function useWplsName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof wplsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wplsABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: wplsABI,
    address: wplsAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof wplsABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wplsABI}__ and `functionName` set to `"symbol"`.
 */
export function useWplsSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof wplsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wplsABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: wplsABI,
    address: wplsAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof wplsABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wplsABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useWplsTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof wplsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof wplsABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: wplsABI,
    address: wplsAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof wplsABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wplsABI}__.
 */
export function useWplsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof wplsABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof wplsABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof wplsABI, TFunctionName, TMode>({
    abi: wplsABI,
    address: wplsAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wplsABI}__ and `functionName` set to `"approve"`.
 */
export function useWplsApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof wplsABI, "approve">["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof wplsABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof wplsABI, "approve", TMode>({
    abi: wplsABI,
    address: wplsAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wplsABI}__ and `functionName` set to `"transfer"`.
 */
export function useWplsTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wplsABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof wplsABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<typeof wplsABI, "transfer", TMode>({
    abi: wplsABI,
    address: wplsAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wplsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useWplsTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wplsABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof wplsABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof wplsABI, "transferFrom", TMode>({
    abi: wplsABI,
    address: wplsAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wplsABI}__.
 */
export function usePrepareWplsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wplsABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: wplsABI,
    address: wplsAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof wplsABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wplsABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareWplsApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wplsABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: wplsABI,
    address: wplsAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof wplsABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wplsABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareWplsTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wplsABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: wplsABI,
    address: wplsAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof wplsABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wplsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareWplsTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wplsABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: wplsABI,
    address: wplsAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof wplsABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wplsABI}__.
 */
export function useWplsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof wplsABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: wplsABI,
    address: wplsAddress,
    ...config,
  } as UseContractEventConfig<typeof wplsABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wplsABI}__ and `eventName` set to `"Approval"`.
 */
export function useWplsApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof wplsABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: wplsABI,
    address: wplsAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof wplsABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wplsABI}__ and `eventName` set to `"Transfer"`.
 */
export function useWplsTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof wplsABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: wplsABI,
    address: wplsAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof wplsABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__.
 */
export function useOFlowRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useOFlowAdminRole<
  TFunctionName extends "ADMIN_ROLE",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useOFlowDefaultAdminRole<
  TFunctionName extends "DEFAULT_ADMIN_ROLE",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"MAX_DISCOUNT"`.
 */
export function useOFlowMaxDiscount<
  TFunctionName extends "MAX_DISCOUNT",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "MAX_DISCOUNT",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"MAX_TWAP_POINTS"`.
 */
export function useOFlowMaxTwapPoints<
  TFunctionName extends "MAX_TWAP_POINTS",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "MAX_TWAP_POINTS",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"MIN_DISCOUNT"`.
 */
export function useOFlowMinDiscount<
  TFunctionName extends "MIN_DISCOUNT",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "MIN_DISCOUNT",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"PAUSER_ROLE"`.
 */
export function useOFlowPauserRole<
  TFunctionName extends "PAUSER_ROLE",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "PAUSER_ROLE",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"allowance"`.
 */
export function useOFlowAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useOFlowBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"decimals"`.
 */
export function useOFlowDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"discount"`.
 */
export function useOFlowDiscount<
  TFunctionName extends "discount",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "discount",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"getDiscountedPrice"`.
 */
export function useOFlowGetDiscountedPrice<
  TFunctionName extends "getDiscountedPrice",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "getDiscountedPrice",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useOFlowGetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"getTimeWeightedAveragePrice"`.
 */
export function useOFlowGetTimeWeightedAveragePrice<
  TFunctionName extends "getTimeWeightedAveragePrice",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "getTimeWeightedAveragePrice",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"hasRole"`.
 */
export function useOFlowHasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"isPaused"`.
 */
export function useOFlowIsPaused<
  TFunctionName extends "isPaused",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "isPaused",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"name"`.
 */
export function useOFlowName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"pair"`.
 */
export function useOFlowPair<
  TFunctionName extends "pair",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "pair",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"paymentToken"`.
 */
export function useOFlowPaymentToken<
  TFunctionName extends "paymentToken",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "paymentToken",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useOFlowSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"symbol"`.
 */
export function useOFlowSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useOFlowTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"treasury"`.
 */
export function useOFlowTreasury<
  TFunctionName extends "treasury",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "treasury",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"twapPoints"`.
 */
export function useOFlowTwapPoints<
  TFunctionName extends "twapPoints",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "twapPoints",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"underlyingToken"`.
 */
export function useOFlowUnderlyingToken<
  TFunctionName extends "underlyingToken",
  TSelectData = ReadContractResult<typeof oFlowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "underlyingToken",
    ...config,
  } as UseContractReadConfig<typeof oFlowABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__.
 */
export function useOFlowWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof oFlowABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof oFlowABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, TFunctionName, TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"approve"`.
 */
export function useOFlowApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oFlowABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof oFlowABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "approve", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"burn"`.
 */
export function useOFlowBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof oFlowABI, "burn">["request"]["abi"],
        "burn",
        TMode
      > & { functionName?: "burn" }
    : UseContractWriteConfig<typeof oFlowABI, "burn", TMode> & {
        abi?: never;
        functionName?: "burn";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "burn", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useOFlowDecreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oFlowABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<typeof oFlowABI, "decreaseAllowance", TMode> & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "decreaseAllowance", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"exercise"`.
 */
export function useOFlowExercise<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oFlowABI,
          "exercise"
        >["request"]["abi"],
        "exercise",
        TMode
      > & { functionName?: "exercise" }
    : UseContractWriteConfig<typeof oFlowABI, "exercise", TMode> & {
        abi?: never;
        functionName?: "exercise";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "exercise", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "exercise",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"grantRole"`.
 */
export function useOFlowGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oFlowABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<typeof oFlowABI, "grantRole", TMode> & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "grantRole", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useOFlowIncreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oFlowABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<typeof oFlowABI, "increaseAllowance", TMode> & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "increaseAllowance", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"mint"`.
 */
export function useOFlowMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof oFlowABI, "mint">["request"]["abi"],
        "mint",
        TMode
      > & { functionName?: "mint" }
    : UseContractWriteConfig<typeof oFlowABI, "mint", TMode> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "mint", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"pause"`.
 */
export function useOFlowPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof oFlowABI, "pause">["request"]["abi"],
        "pause",
        TMode
      > & { functionName?: "pause" }
    : UseContractWriteConfig<typeof oFlowABI, "pause", TMode> & {
        abi?: never;
        functionName?: "pause";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "pause", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "pause",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useOFlowRenounceRole<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oFlowABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<typeof oFlowABI, "renounceRole", TMode> & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "renounceRole", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useOFlowRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oFlowABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<typeof oFlowABI, "revokeRole", TMode> & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "revokeRole", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"setDiscount"`.
 */
export function useOFlowSetDiscount<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oFlowABI,
          "setDiscount"
        >["request"]["abi"],
        "setDiscount",
        TMode
      > & { functionName?: "setDiscount" }
    : UseContractWriteConfig<typeof oFlowABI, "setDiscount", TMode> & {
        abi?: never;
        functionName?: "setDiscount";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "setDiscount", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "setDiscount",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"setPair"`.
 */
export function useOFlowSetPair<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oFlowABI,
          "setPair"
        >["request"]["abi"],
        "setPair",
        TMode
      > & { functionName?: "setPair" }
    : UseContractWriteConfig<typeof oFlowABI, "setPair", TMode> & {
        abi?: never;
        functionName?: "setPair";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "setPair", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "setPair",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"setTreasury"`.
 */
export function useOFlowSetTreasury<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oFlowABI,
          "setTreasury"
        >["request"]["abi"],
        "setTreasury",
        TMode
      > & { functionName?: "setTreasury" }
    : UseContractWriteConfig<typeof oFlowABI, "setTreasury", TMode> & {
        abi?: never;
        functionName?: "setTreasury";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "setTreasury", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "setTreasury",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"setTwapPoints"`.
 */
export function useOFlowSetTwapPoints<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oFlowABI,
          "setTwapPoints"
        >["request"]["abi"],
        "setTwapPoints",
        TMode
      > & { functionName?: "setTwapPoints" }
    : UseContractWriteConfig<typeof oFlowABI, "setTwapPoints", TMode> & {
        abi?: never;
        functionName?: "setTwapPoints";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "setTwapPoints", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "setTwapPoints",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"transfer"`.
 */
export function useOFlowTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oFlowABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof oFlowABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "transfer", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useOFlowTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oFlowABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof oFlowABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "transferFrom", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"unPause"`.
 */
export function useOFlowUnPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oFlowABI,
          "unPause"
        >["request"]["abi"],
        "unPause",
        TMode
      > & { functionName?: "unPause" }
    : UseContractWriteConfig<typeof oFlowABI, "unPause", TMode> & {
        abi?: never;
        functionName?: "unPause";
      } = {} as any
) {
  return useContractWrite<typeof oFlowABI, "unPause", TMode>({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "unPause",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__.
 */
export function usePrepareOFlowWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareOFlowApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareOFlowBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "burn">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareOFlowDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "decreaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"exercise"`.
 */
export function usePrepareOFlowExercise(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "exercise">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "exercise",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "exercise">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareOFlowGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "grantRole">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "grantRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareOFlowIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "increaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareOFlowMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareOFlowPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "pause">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "pause",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "pause">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareOFlowRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "renounceRole">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "renounceRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareOFlowRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "revokeRole">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "revokeRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"setDiscount"`.
 */
export function usePrepareOFlowSetDiscount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "setDiscount">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "setDiscount",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "setDiscount">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"setPair"`.
 */
export function usePrepareOFlowSetPair(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "setPair">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "setPair",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "setPair">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePrepareOFlowSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "setTreasury">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "setTreasury",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "setTreasury">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"setTwapPoints"`.
 */
export function usePrepareOFlowSetTwapPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "setTwapPoints">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "setTwapPoints",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "setTwapPoints">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareOFlowTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareOFlowTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oFlowABI}__ and `functionName` set to `"unPause"`.
 */
export function usePrepareOFlowUnPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oFlowABI, "unPause">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oFlowABI,
    address: oFlowAddress,
    functionName: "unPause",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oFlowABI, "unPause">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oFlowABI}__.
 */
export function useOFlowEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof oFlowABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: oFlowABI,
    address: oFlowAddress,
    ...config,
  } as UseContractEventConfig<typeof oFlowABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oFlowABI}__ and `eventName` set to `"Approval"`.
 */
export function useOFlowApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof oFlowABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oFlowABI,
    address: oFlowAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof oFlowABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oFlowABI}__ and `eventName` set to `"Exercise"`.
 */
export function useOFlowExerciseEvent(
  config: Omit<
    UseContractEventConfig<typeof oFlowABI, "Exercise">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oFlowABI,
    address: oFlowAddress,
    eventName: "Exercise",
    ...config,
  } as UseContractEventConfig<typeof oFlowABI, "Exercise">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oFlowABI}__ and `eventName` set to `"PauseStateChanged"`.
 */
export function useOFlowPauseStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof oFlowABI, "PauseStateChanged">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oFlowABI,
    address: oFlowAddress,
    eventName: "PauseStateChanged",
    ...config,
  } as UseContractEventConfig<typeof oFlowABI, "PauseStateChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oFlowABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useOFlowRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof oFlowABI, "RoleAdminChanged">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oFlowABI,
    address: oFlowAddress,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<typeof oFlowABI, "RoleAdminChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oFlowABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useOFlowRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof oFlowABI, "RoleGranted">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oFlowABI,
    address: oFlowAddress,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<typeof oFlowABI, "RoleGranted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oFlowABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useOFlowRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof oFlowABI, "RoleRevoked">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oFlowABI,
    address: oFlowAddress,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<typeof oFlowABI, "RoleRevoked">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oFlowABI}__ and `eventName` set to `"SetDiscount"`.
 */
export function useOFlowSetDiscountEvent(
  config: Omit<
    UseContractEventConfig<typeof oFlowABI, "SetDiscount">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oFlowABI,
    address: oFlowAddress,
    eventName: "SetDiscount",
    ...config,
  } as UseContractEventConfig<typeof oFlowABI, "SetDiscount">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oFlowABI}__ and `eventName` set to `"SetPair"`.
 */
export function useOFlowSetPairEvent(
  config: Omit<
    UseContractEventConfig<typeof oFlowABI, "SetPair">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oFlowABI,
    address: oFlowAddress,
    eventName: "SetPair",
    ...config,
  } as UseContractEventConfig<typeof oFlowABI, "SetPair">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oFlowABI}__ and `eventName` set to `"SetTreasury"`.
 */
export function useOFlowSetTreasuryEvent(
  config: Omit<
    UseContractEventConfig<typeof oFlowABI, "SetTreasury">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oFlowABI,
    address: oFlowAddress,
    eventName: "SetTreasury",
    ...config,
  } as UseContractEventConfig<typeof oFlowABI, "SetTreasury">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oFlowABI}__ and `eventName` set to `"SetTwapPoints"`.
 */
export function useOFlowSetTwapPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof oFlowABI, "SetTwapPoints">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oFlowABI,
    address: oFlowAddress,
    eventName: "SetTwapPoints",
    ...config,
  } as UseContractEventConfig<typeof oFlowABI, "SetTwapPoints">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oFlowABI}__ and `eventName` set to `"Transfer"`.
 */
export function useOFlowTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof oFlowABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oFlowABI,
    address: oFlowAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof oFlowABI, "Transfer">);
}
